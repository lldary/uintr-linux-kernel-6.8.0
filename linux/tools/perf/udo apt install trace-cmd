
List of pre-defined events (to be used in -e or -M):

  branch-instructions OR branches                    [Hardware event]
  branch-misses                                      [Hardware event]
  bus-cycles                                         [Hardware event]
  cache-misses                                       [Hardware event]
  cache-references                                   [Hardware event]
  cpu-cycles OR cycles                               [Hardware event]
  instructions                                       [Hardware event]
  ref-cycles                                         [Hardware event]
  alignment-faults                                   [Software event]
  bpf-output                                         [Software event]
  cgroup-switches                                    [Software event]
  context-switches OR cs                             [Software event]
  cpu-clock                                          [Software event]
  cpu-migrations OR migrations                       [Software event]
  dummy                                              [Software event]
  emulation-faults                                   [Software event]
  major-faults                                       [Software event]
  minor-faults                                       [Software event]
  page-faults OR faults                              [Software event]
  task-clock                                         [Software event]
  duration_time                                      [Tool event]
  user_time                                          [Tool event]
  system_time                                        [Tool event]

cpu:
  L1-dcache-loads OR cpu/L1-dcache-loads/
  L1-dcache-load-misses OR cpu/L1-dcache-load-misses/
  L1-dcache-stores OR cpu/L1-dcache-stores/
  L1-icache-load-misses OR cpu/L1-icache-load-misses/
  LLC-loads OR cpu/LLC-loads/
  LLC-load-misses OR cpu/LLC-load-misses/
  LLC-stores OR cpu/LLC-stores/
  LLC-store-misses OR cpu/LLC-store-misses/
  dTLB-loads OR cpu/dTLB-loads/
  dTLB-load-misses OR cpu/dTLB-load-misses/
  dTLB-stores OR cpu/dTLB-stores/
  dTLB-store-misses OR cpu/dTLB-store-misses/
  iTLB-load-misses OR cpu/iTLB-load-misses/
  branch-loads OR cpu/branch-loads/
  branch-load-misses OR cpu/branch-load-misses/
  node-loads OR cpu/node-loads/
  node-load-misses OR cpu/node-load-misses/
  branch-instructions OR cpu/branch-instructions/    [Kernel PMU event]
  branch-misses OR cpu/branch-misses/                [Kernel PMU event]
  bus-cycles OR cpu/bus-cycles/                      [Kernel PMU event]
  cache-misses OR cpu/cache-misses/                  [Kernel PMU event]
  cache-references OR cpu/cache-references/          [Kernel PMU event]
  cpu-cycles OR cpu/cpu-cycles/                      [Kernel PMU event]
  instructions OR cpu/instructions/                  [Kernel PMU event]
  mem-loads OR cpu/mem-loads/                        [Kernel PMU event]
  mem-loads-aux OR cpu/mem-loads-aux/                [Kernel PMU event]
  mem-stores OR cpu/mem-stores/                      [Kernel PMU event]
  ref-cycles OR cpu/ref-cycles/                      [Kernel PMU event]
  slots OR cpu/slots/                                [Kernel PMU event]
  topdown-bad-spec OR cpu/topdown-bad-spec/          [Kernel PMU event]
  topdown-be-bound OR cpu/topdown-be-bound/          [Kernel PMU event]
  topdown-br-mispredict OR cpu/topdown-br-mispredict/[Kernel PMU event]
  topdown-fe-bound OR cpu/topdown-fe-bound/          [Kernel PMU event]
  topdown-fetch-lat OR cpu/topdown-fetch-lat/        [Kernel PMU event]
  topdown-heavy-ops OR cpu/topdown-heavy-ops/        [Kernel PMU event]
  topdown-mem-bound OR cpu/topdown-mem-bound/        [Kernel PMU event]
  topdown-retiring OR cpu/topdown-retiring/          [Kernel PMU event]
  cstate_core/c1-residency/                          [Kernel PMU event]
  cstate_core/c6-residency/                          [Kernel PMU event]
  cstate_pkg/c2-residency/                           [Kernel PMU event]
  cstate_pkg/c6-residency/                           [Kernel PMU event]
  intel_bts//                                        [Kernel PMU event]
  intel_pt//                                         [Kernel PMU event]
  msr/aperf/                                         [Kernel PMU event]
  msr/cpu_thermal_margin/                            [Kernel PMU event]
  msr/mperf/                                         [Kernel PMU event]
  msr/smi/                                           [Kernel PMU event]
  msr/tsc/                                           [Kernel PMU event]
  power/energy-pkg/                                  [Kernel PMU event]
  power/energy-psys/                                 [Kernel PMU event]
  power/energy-ram/                                  [Kernel PMU event]
  uncore_iio_free_running/bw_in_port0/               [Kernel PMU event]
  uncore_iio_free_running/bw_in_port1/               [Kernel PMU event]
  uncore_iio_free_running/bw_in_port2/               [Kernel PMU event]
  uncore_iio_free_running/bw_in_port3/               [Kernel PMU event]
  uncore_iio_free_running/bw_in_port4/               [Kernel PMU event]
  uncore_iio_free_running/bw_in_port5/               [Kernel PMU event]
  uncore_iio_free_running/bw_in_port6/               [Kernel PMU event]
  uncore_iio_free_running/bw_in_port7/               [Kernel PMU event]
  uncore_iio_free_running/bw_out_port0/              [Kernel PMU event]
  uncore_iio_free_running/bw_out_port1/              [Kernel PMU event]
  uncore_iio_free_running/bw_out_port2/              [Kernel PMU event]
  uncore_iio_free_running/bw_out_port3/              [Kernel PMU event]
  uncore_iio_free_running/bw_out_port4/              [Kernel PMU event]
  uncore_iio_free_running/bw_out_port5/              [Kernel PMU event]
  uncore_iio_free_running/bw_out_port6/              [Kernel PMU event]
  uncore_iio_free_running/bw_out_port7/              [Kernel PMU event]
  uncore_iio_free_running/ioclk/                     [Kernel PMU event]
  uncore_iio_free_running/bw_in_port0/               [Kernel PMU event]
  uncore_iio_free_running/bw_in_port1/               [Kernel PMU event]
  uncore_iio_free_running/bw_in_port2/               [Kernel PMU event]
  uncore_iio_free_running/bw_in_port3/               [Kernel PMU event]
  uncore_iio_free_running/bw_in_port4/               [Kernel PMU event]
  uncore_iio_free_running/bw_in_port5/               [Kernel PMU event]
  uncore_iio_free_running/bw_in_port6/               [Kernel PMU event]
  uncore_iio_free_running/bw_in_port7/               [Kernel PMU event]
  uncore_iio_free_running/bw_out_port0/              [Kernel PMU event]
  uncore_iio_free_running/bw_out_port1/              [Kernel PMU event]
  uncore_iio_free_running/bw_out_port2/              [Kernel PMU event]
  uncore_iio_free_running/bw_out_port3/              [Kernel PMU event]
  uncore_iio_free_running/bw_out_port4/              [Kernel PMU event]
  uncore_iio_free_running/bw_out_port5/              [Kernel PMU event]
  uncore_iio_free_running/bw_out_port6/              [Kernel PMU event]
  uncore_iio_free_running/bw_out_port7/              [Kernel PMU event]
  uncore_iio_free_running/ioclk/                     [Kernel PMU event]
  uncore_iio_free_running/bw_in_port0/               [Kernel PMU event]
  uncore_iio_free_running/bw_in_port1/               [Kernel PMU event]
  uncore_iio_free_running/bw_in_port2/               [Kernel PMU event]
  uncore_iio_free_running/bw_in_port3/               [Kernel PMU event]
  uncore_iio_free_running/bw_in_port4/               [Kernel PMU event]
  uncore_iio_free_running/bw_in_port5/               [Kernel PMU event]
  uncore_iio_free_running/bw_in_port6/               [Kernel PMU event]
  uncore_iio_free_running/bw_in_port7/               [Kernel PMU event]
  uncore_iio_free_running/bw_out_port0/              [Kernel PMU event]
  uncore_iio_free_running/bw_out_port1/              [Kernel PMU event]
  uncore_iio_free_running/bw_out_port2/              [Kernel PMU event]
  uncore_iio_free_running/bw_out_port3/              [Kernel PMU event]
  uncore_iio_free_running/bw_out_port4/              [Kernel PMU event]
  uncore_iio_free_running/bw_out_port5/              [Kernel PMU event]
  uncore_iio_free_running/bw_out_port6/              [Kernel PMU event]
  uncore_iio_free_running/bw_out_port7/              [Kernel PMU event]
  uncore_iio_free_running/ioclk/                     [Kernel PMU event]
  uncore_iio_free_running/bw_in_port0/               [Kernel PMU event]
  uncore_iio_free_running/bw_in_port1/               [Kernel PMU event]
  uncore_iio_free_running/bw_in_port2/               [Kernel PMU event]
  uncore_iio_free_running/bw_in_port3/               [Kernel PMU event]
  uncore_iio_free_running/bw_in_port4/               [Kernel PMU event]
  uncore_iio_free_running/bw_in_port5/               [Kernel PMU event]
  uncore_iio_free_running/bw_in_port6/               [Kernel PMU event]
  uncore_iio_free_running/bw_in_port7/               [Kernel PMU event]
  uncore_iio_free_running/bw_out_port0/              [Kernel PMU event]
  uncore_iio_free_running/bw_out_port1/              [Kernel PMU event]
  uncore_iio_free_running/bw_out_port2/              [Kernel PMU event]
  uncore_iio_free_running/bw_out_port3/              [Kernel PMU event]
  uncore_iio_free_running/bw_out_port4/              [Kernel PMU event]
  uncore_iio_free_running/bw_out_port5/              [Kernel PMU event]
  uncore_iio_free_running/bw_out_port6/              [Kernel PMU event]
  uncore_iio_free_running/bw_out_port7/              [Kernel PMU event]
  uncore_iio_free_running/ioclk/                     [Kernel PMU event]
  uncore_imc/cas_count_read/                         [Kernel PMU event]
  uncore_imc/cas_count_write/                        [Kernel PMU event]
  uncore_imc/clockticks/                             [Kernel PMU event]
  uncore_imc/cas_count_read/                         [Kernel PMU event]
  uncore_imc/cas_count_write/                        [Kernel PMU event]
  uncore_imc/clockticks/                             [Kernel PMU event]
  uncore_imc/cas_count_read/                         [Kernel PMU event]
  uncore_imc/cas_count_write/                        [Kernel PMU event]
  uncore_imc/clockticks/                             [Kernel PMU event]
  uncore_imc_free_running/dclk/                      [Kernel PMU event]
  uncore_imc_free_running/rpq_cycles/                [Kernel PMU event]
  uncore_imc_free_running/wpq_cycles/                [Kernel PMU event]
  uncore_imc_free_running/dclk/                      [Kernel PMU event]
  uncore_imc_free_running/rpq_cycles/                [Kernel PMU event]
  uncore_imc_free_running/wpq_cycles/                [Kernel PMU event]
  uncore_imc_free_running/dclk/                      [Kernel PMU event]
  uncore_imc_free_running/rpq_cycles/                [Kernel PMU event]
  uncore_imc_free_running/wpq_cycles/                [Kernel PMU event]

cache:
  l1d.hwpf_miss
       [L1D.HWPF_MISS]
  l1d.replacement
       [Counts the number of cache lines replaced in L1 data cache]
  l1d_pend_miss.fb_full
       [Number of cycles a demand request has waited due to L1D Fill Buffer (FB) unavailability]
  l1d_pend_miss.fb_full_periods
       [Number of phases a demand request has waited due to L1D Fill Buffer (FB) unavailability]
  l1d_pend_miss.l2_stalls
       [Number of cycles a demand request has waited due to L1D due to lack of L2 resources]
  l1d_pend_miss.pending
       [Number of L1D misses that are outstanding]
  l1d_pend_miss.pending_cycles
       [Cycles with L1D load Misses outstanding]
  l2_lines_in.all
       [L2 cache lines filling L2]
  l2_lines_out.non_silent
       [L2_LINES_OUT.NON_SILENT]
  l2_lines_out.silent
       [Non-modified cache lines that are silently dropped by L2 cache when triggered by an L2 cache fill]
  l2_lines_out.useless_hwpf
       [Cache lines that have been L2 hardware prefetched but not used by demand accesses]
  l2_request.all
       [All accesses to L2 cache [This event is alias to L2_RQSTS.REFERENCES]]
  l2_request.miss
       [Read requests with true-miss in L2 cache. [This event is alias to L2_RQSTS.MISS]]
  l2_rqsts.all_code_rd
       [L2 code requests]
  l2_rqsts.all_demand_data_rd
       [Demand Data Read access L2 cache]
  l2_rqsts.all_demand_miss
       [Demand requests that miss L2 cache]
  l2_rqsts.all_demand_references
       [Demand requests to L2 cache]
  l2_rqsts.all_hwpf
       [L2_RQSTS.ALL_HWPF]
  l2_rqsts.all_rfo
       [RFO requests to L2 cache]
  l2_rqsts.code_rd_hit
       [L2 cache hits when fetching instructions, code reads]
  l2_rqsts.code_rd_miss
       [L2 cache misses when fetching instructions]
  l2_rqsts.demand_data_rd_hit
       [Demand Data Read requests that hit L2 cache]
  l2_rqsts.demand_data_rd_miss
       [Demand Data Read miss L2 cache]
  l2_rqsts.hwpf_miss
       [L2_RQSTS.HWPF_MISS]
  l2_rqsts.miss
       [Read requests with true-miss in L2 cache. [This event is alias to L2_REQUEST.MISS]]
  l2_rqsts.references
       [All accesses to L2 cache [This event is alias to L2_REQUEST.ALL]]
  l2_rqsts.rfo_hit
       [RFO requests that hit L2 cache]
  l2_rqsts.rfo_miss
       [RFO requests that miss L2 cache]
  l2_rqsts.swpf_hit
       [SW prefetch requests that hit L2 cache]
  l2_rqsts.swpf_miss
       [SW prefetch requests that miss L2 cache]
  longest_lat_cache.miss
       [Core-originated cacheable requests that missed L3 (Except hardware prefetches to the L3)]
  longest_lat_cache.reference
       [Core-originated cacheable requests that refer to L3 (Except hardware prefetches to the L3)]
  mem_inst_retired.all_loads
       [Retired load instructions Supports address when precise (Precise event)]
  mem_inst_retired.all_stores
       [Retired store instructions Supports address when precise (Precise event)]
  mem_inst_retired.any
       [All retired memory instructions Supports address when precise (Precise event)]
  mem_inst_retired.lock_loads
       [Retired load instructions with locked access Supports address when precise (Precise event)]
  mem_inst_retired.split_loads
       [Retired load instructions that split across a cacheline boundary Supports address when precise (Precise event)]
  mem_inst_retired.split_stores
       [Retired store instructions that split across a cacheline boundary Supports address when precise (Precise event)]
  mem_inst_retired.stlb_miss_loads
       [Retired load instructions that miss the STLB Supports address when precise (Precise event)]
  mem_inst_retired.stlb_miss_stores
       [Retired store instructions that miss the STLB Supports address when precise (Precise event)]
  mem_load_completed.l1_miss_any
       [Completed demand load uops that miss the L1 d-cache]
  mem_load_l3_hit_retired.xsnp_fwd
       [Retired load instructions whose data sources were HitM responses from shared L3 Supports address when precise (Precise event)]
  mem_load_l3_hit_retired.xsnp_miss
       [Retired load instructions whose data sources were L3 hit and cross-core snoop missed in on-pkg core cache Supports address when precise (Precise event)]
  mem_load_l3_hit_retired.xsnp_no_fwd
       [Retired load instructions whose data sources were L3 and cross-core snoop hits in on-pkg core cache Supports address when precise (Precise event)]
  mem_load_l3_hit_retired.xsnp_none
       [Retired load instructions whose data sources were hits in L3 without snoops required Supports address when precise (Precise event)]
  mem_load_l3_miss_retired.local_dram
       [Retired load instructions which data sources missed L3 but serviced from local dram Supports address when precise (Precise event)]
  mem_load_l3_miss_retired.remote_dram
       [MEM_LOAD_L3_MISS_RETIRED.REMOTE_DRAM Supports address when precise (Precise event)]
  mem_load_l3_miss_retired.remote_fwd
       [Retired load instructions whose data sources was forwarded from a remote cache Supports address when precise (Precise event)]
  mem_load_l3_miss_retired.remote_hitm
       [MEM_LOAD_L3_MISS_RETIRED.REMOTE_HITM Supports address when precise (Precise event)]
  mem_load_misc_retired.uc
       [Retired instructions with at least 1 uncacheable load or lock Supports address when precise (Precise event)]
  mem_load_retired.fb_hit
       [Number of completed demand load requests that missed the L1, but hit the FB(fill buffer), because a preceding miss to the same cacheline initiated the line to be brought into L1, but data is not yet ready in L1 Supports address
        when precise (Precise event)]
  mem_load_retired.l1_hit
       [Retired load instructions with L1 cache hits as data sources Supports address when precise (Precise event)]
  mem_load_retired.l1_miss
       [Retired load instructions missed L1 cache as data sources Supports address when precise (Precise event)]
  mem_load_retired.l2_hit
       [Retired load instructions with L2 cache hits as data sources Supports address when precise (Precise event)]
  mem_load_retired.l2_miss
       [Retired load instructions missed L2 cache as data sources Supports address when precise (Precise event)]
  mem_load_retired.l3_hit
       [Retired load instructions with L3 cache hits as data sources Supports address when precise (Precise event)]
  mem_load_retired.l3_miss
       [Retired load instructions missed L3 cache as data sources Supports address when precise (Precise event)]
  mem_store_retired.l2_hit
       [MEM_STORE_RETIRED.L2_HIT]
  mem_uop_retired.any
       [Retired memory uops for any access]
  ocr.demand_code_rd.l3_hit
       [Counts demand instruction fetches and L1 instruction cache prefetches that hit in the L3 or were snooped from another core's caches on the same socket]
  ocr.demand_code_rd.l3_hit.snoop_hitm
       [Counts demand instruction fetches and L1 instruction cache prefetches that resulted in a snoop hit a modified line in another core's caches which forwarded the data]
  ocr.demand_code_rd.snc_cache.hit_with_fwd
       [Counts demand instruction fetches and L1 instruction cache prefetches that either hit a non-modified line in a distant L3 Cache or were snooped from a distant core's L1/L2 caches on this socket when the system is in SNC
        (sub-NUMA cluster) mode]
  ocr.demand_code_rd.snc_cache.hitm
       [Counts demand instruction fetches and L1 instruction cache prefetches that hit a modified line in a distant L3 Cache or were snooped from a distant core's L1/L2 caches on this socket when the system is in SNC (sub-NUMA cluster)
        mode]
  ocr.demand_data_rd.l3_hit
       [Counts demand data reads that hit in the L3 or were snooped from another core's caches on the same socket]
  ocr.demand_data_rd.l3_hit.snoop_hit_no_fwd
       [Counts demand data reads that resulted in a snoop that hit in another core, which did not forward the data]
  ocr.demand_data_rd.l3_hit.snoop_hit_with_fwd
       [Counts demand data reads that resulted in a snoop hit in another core's caches which forwarded the unmodified data to the requesting core]
  ocr.demand_data_rd.l3_hit.snoop_hitm
       [Counts demand data reads that resulted in a snoop hit a modified line in another core's caches which forwarded the data]
  ocr.demand_data_rd.remote_cache.snoop_hit_with_fwd
       [Counts demand data reads that were supplied by a cache on a remote socket where a snoop hit in another core's caches which forwarded the unmodified data to the requesting core]
  ocr.demand_data_rd.remote_cache.snoop_hitm
       [Counts demand data reads that were supplied by a cache on a remote socket where a snoop hit a modified line in another core's caches which forwarded the data]
  ocr.demand_data_rd.snc_cache.hit_with_fwd
       [Counts demand data reads that either hit a non-modified line in a distant L3 Cache or were snooped from a distant core's L1/L2 caches on this socket when the system is in SNC (sub-NUMA cluster) mode]
  ocr.demand_data_rd.snc_cache.hitm
       [Counts demand data reads that hit a modified line in a distant L3 Cache or were snooped from a distant core's L1/L2 caches on this socket when the system is in SNC (sub-NUMA cluster) mode]
  ocr.demand_rfo.l3_hit
       [Counts demand reads for ownership (RFO) requests and software prefetches for exclusive ownership (PREFETCHW) that hit in the L3 or were snooped from another core's caches on the same socket]
  ocr.demand_rfo.l3_hit.snoop_hitm
       [Counts demand reads for ownership (RFO) requests and software prefetches for exclusive ownership (PREFETCHW) that resulted in a snoop hit a modified line in another core's caches which forwarded the data]
  ocr.demand_rfo.snc_cache.hit_with_fwd
       [Counts demand reads for ownership (RFO) requests and software prefetches for exclusive ownership (PREFETCHW) that either hit a non-modified line in a distant L3 Cache or were snooped from a distant core's L1/L2 caches on this
        socket when the system is in SNC (sub-NUMA cluster) mode]
  ocr.demand_rfo.snc_cache.hitm
       [Counts demand reads for ownership (RFO) requests and software prefetches for exclusive ownership (PREFETCHW) that hit a modified line in a distant L3 Cache or were snooped from a distant core's L1/L2 caches on this socket when
        the system is in SNC (sub-NUMA cluster) mode]
  ocr.hwpf_l3.l3_hit
       [Counts hardware prefetches to the L3 only that hit in the L3 or were snooped from another core's caches on the same socket]
  ocr.reads_to_core.l3_hit
       [Counts all (cacheable) data read, code read and RFO requests including demands and prefetches to the core caches (L1 or L2) that hit in the L3 or were snooped from another core's caches on the same socket]
  ocr.reads_to_core.l3_hit.snoop_hit_no_fwd
       [Counts all (cacheable) data read, code read and RFO requests including demands and prefetches to the core caches (L1 or L2) that resulted in a snoop that hit in another core, which did not forward the data]
  ocr.reads_to_core.l3_hit.snoop_hit_with_fwd
       [Counts all (cacheable) data read, code read and RFO requests including demands and prefetches to the core caches (L1 or L2) that resulted in a snoop hit in another core's caches which forwarded the unmodified data to the
        requesting core]
  ocr.reads_to_core.l3_hit.snoop_hitm
       [Counts all (cacheable) data read, code read and RFO requests including demands and prefetches to the core caches (L1 or L2) that resulted in a snoop hit a modified line in another core's caches which forwarded the data]
  ocr.reads_to_core.remote_cache.snoop_fwd
       [Counts all (cacheable) data read, code read and RFO requests including demands and prefetches to the core caches (L1 or L2) that were supplied by a cache on a remote socket where a snoop was sent and data was returned (Modified
        or Not Modified)]
  ocr.reads_to_core.remote_cache.snoop_hit_with_fwd
       [Counts all (cacheable) data read, code read and RFO requests including demands and prefetches to the core caches (L1 or L2) that were supplied by a cache on a remote socket where a snoop hit in another core's caches which
        forwarded the unmodified data to the requesting core]
  ocr.reads_to_core.remote_cache.snoop_hitm
       [Counts all (cacheable) data read, code read and RFO requests including demands and prefetches to the core caches (L1 or L2) that were supplied by a cache on a remote socket where a snoop hit a modified line in another core's
        caches which forwarded the data]
  ocr.reads_to_core.snc_cache.hit_with_fwd
       [Counts all (cacheable) data read, code read and RFO requests including demands and prefetches to the core caches (L1 or L2) that either hit a non-modified line in a distant L3 Cache or were snooped from a distant core's L1/L2
        caches on this socket when the system is in SNC (sub-NUMA cluster) mode]
  ocr.reads_to_core.snc_cache.hitm
       [Counts all (cacheable) data read, code read and RFO requests including demands and prefetches to the core caches (L1 or L2) that hit a modified line in a distant L3 Cache or were snooped from a distant core's L1/L2 caches on
        this socket when the system is in SNC (sub-NUMA cluster) mode]
  ocr.rfo_to_core.l3_hit_m
       [Counts demand reads for ownership (RFO), hardware prefetch RFOs (which bring data to L2), and software prefetches for exclusive ownership (PREFETCHW) that hit to a (M)odified cacheline in the L3 or snoop filter]
  ocr.streaming_wr.l3_hit
       [Counts streaming stores that hit in the L3 or were snooped from another core's caches on the same socket]
  offcore_requests.all_requests
       [OFFCORE_REQUESTS.ALL_REQUESTS]
  offcore_requests.data_rd
       [Demand and prefetch data reads]
  offcore_requests.demand_data_rd
       [Demand Data Read requests sent to uncore]
  offcore_requests_outstanding.cycles_with_data_rd
       [OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DATA_RD]
  offcore_requests_outstanding.cycles_with_demand_data_rd
       [Cycles where at least 1 outstanding demand data read request is pending]
  offcore_requests_outstanding.cycles_with_demand_rfo
       [OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DEMAND_RFO]
  offcore_requests_outstanding.data_rd
       [OFFCORE_REQUESTS_OUTSTANDING.DATA_RD]
  offcore_requests_outstanding.demand_data_rd
       [For every cycle, increments by the number of outstanding demand data read requests pending]
  sq_misc.bus_lock
       [Counts bus locks, accounts for cache line split locks and UC locks]
  sw_prefetch_access.nta
       [Number of PREFETCHNTA instructions executed]
  sw_prefetch_access.prefetchw
       [Number of PREFETCHW instructions executed]
  sw_prefetch_access.t0
       [Number of PREFETCHT0 instructions executed]
  sw_prefetch_access.t1_t2
       [Number of PREFETCHT1 or PREFETCHT2 instructions executed]

floating point:
  arith.fpdiv_active
       [ARITH.FPDIV_ACTIVE]
  assists.fp
       [Counts all microcode FP assists]
  assists.sse_avx_mix
       [ASSISTS.SSE_AVX_MIX]
  fp_arith_dispatched.port_0
       [FP_ARITH_DISPATCHED.PORT_0 [This event is alias to FP_ARITH_DISPATCHED.V0]]
  fp_arith_dispatched.port_1
       [FP_ARITH_DISPATCHED.PORT_1 [This event is alias to FP_ARITH_DISPATCHED.V1]]
  fp_arith_dispatched.port_5
       [FP_ARITH_DISPATCHED.PORT_5 [This event is alias to FP_ARITH_DISPATCHED.V2]]
  fp_arith_dispatched.v0
       [FP_ARITH_DISPATCHED.V0 [This event is alias to FP_ARITH_DISPATCHED.PORT_0]]
  fp_arith_dispatched.v1
       [FP_ARITH_DISPATCHED.V1 [This event is alias to FP_ARITH_DISPATCHED.PORT_1]]
  fp_arith_dispatched.v2
       [FP_ARITH_DISPATCHED.V2 [This event is alias to FP_ARITH_DISPATCHED.PORT_5]]
  fp_arith_inst_retired.128b_packed_double
       [Counts number of SSE/AVX computational 128-bit packed double precision floating-point instructions retired; some instructions will count twice as noted below. Each count represents 2 computation operations, one for each
        element. Applies to SSE* and AVX* packed double precision floating-point instructions: ADD SUB HADD HSUB SUBADD MUL DIV MIN MAX SQRT DPP FM(N)ADD/SUB. DPP and FM(N)ADD/SUB instructions count twice as they perform 2 calculations
        per element]
  fp_arith_inst_retired.128b_packed_single
       [Number of SSE/AVX computational 128-bit packed single precision floating-point instructions retired; some instructions will count twice as noted below. Each count represents 4 computation operations, one for each element.
        Applies to SSE* and AVX* packed single precision floating-point instructions: ADD SUB MUL DIV MIN MAX RCP14 RSQRT14 SQRT DPP FM(N)ADD/SUB. DPP and FM(N)ADD/SUB instructions count twice as they perform 2 calculations per element]
  fp_arith_inst_retired.256b_packed_double
       [Counts number of SSE/AVX computational 256-bit packed double precision floating-point instructions retired; some instructions will count twice as noted below. Each count represents 4 computation operations, one for each
        element. Applies to SSE* and AVX* packed double precision floating-point instructions: ADD SUB HADD HSUB SUBADD MUL DIV MIN MAX SQRT FM(N)ADD/SUB. FM(N)ADD/SUB instructions count twice as they perform 2 calculations per element]
  fp_arith_inst_retired.256b_packed_single
       [Counts number of SSE/AVX computational 256-bit packed single precision floating-point instructions retired; some instructions will count twice as noted below. Each count represents 8 computation operations, one for each
        element. Applies to SSE* and AVX* packed single precision floating-point instructions: ADD SUB HADD HSUB SUBADD MUL DIV MIN MAX SQRT RSQRT RCP DPP FM(N)ADD/SUB. DPP and FM(N)ADD/SUB instructions count twice as they perform 2
        calculations per element]
  fp_arith_inst_retired.4_flops
       [Number of SSE/AVX computational 128-bit packed single and 256-bit packed double precision FP instructions retired; some instructions will count twice as noted below. Each count represents 2 or/and 4 computation operations, 1
        for each element. Applies to SSE* and AVX* packed single precision and packed double precision FP instructions: ADD SUB HADD HSUB SUBADD MUL DIV MIN MAX RCP14 RSQRT14 SQRT DPP FM(N)ADD/SUB. DPP and FM(N)ADD/SUB count twice as
        they perform 2 calculations per element]
  fp_arith_inst_retired.512b_packed_double
       [Counts number of SSE/AVX computational 512-bit packed double precision floating-point instructions retired; some instructions will count twice as noted below. Each count represents 8 computation operations, one for each
        element. Applies to SSE* and AVX* packed double precision floating-point instructions: ADD SUB MUL DIV MIN MAX SQRT RSQRT14 RCP14 FM(N)ADD/SUB. FM(N)ADD/SUB instructions count twice as they perform 2 calculations per element]
  fp_arith_inst_retired.512b_packed_single
       [Counts number of SSE/AVX computational 512-bit packed single precision floating-point instructions retired; some instructions will count twice as noted below. Each count represents 16 computation operations, one for each
        element. Applies to SSE* and AVX* packed single precision floating-point instructions: ADD SUB MUL DIV MIN MAX SQRT RSQRT14 RCP14 FM(N)ADD/SUB. FM(N)ADD/SUB instructions count twice as they perform 2 calculations per element]
  fp_arith_inst_retired.8_flops
       [Number of SSE/AVX computational 256-bit packed single precision and 512-bit packed double precision FP instructions retired; some instructions will count twice as noted below. Each count represents 8 computation operations, 1
        for each element. Applies to SSE* and AVX* packed single precision and double precision FP instructions: ADD SUB HADD HSUB SUBADD MUL DIV MIN MAX SQRT RSQRT RSQRT14 RCP RCP14 DPP FM(N)ADD/SUB. DPP and FM(N)ADD/SUB count twice
        as they perform 2 calculations per element]
  fp_arith_inst_retired.scalar
       [Number of SSE/AVX computational scalar floating-point instructions retired; some instructions will count twice as noted below. Applies to SSE* and AVX* scalar, double and single precision floating-point: ADD SUB MUL DIV MIN MAX
        RCP14 RSQRT14 RANGE SQRT DPP FM(N)ADD/SUB. DPP and FM(N)ADD/SUB instructions count twice as they perform multiple calculations per element]
  fp_arith_inst_retired.scalar_double
       [Counts number of SSE/AVX computational scalar double precision floating-point instructions retired; some instructions will count twice as noted below. Each count represents 1 computational operation. Applies to SSE* and AVX*
        scalar double precision floating-point instructions: ADD SUB MUL DIV MIN MAX SQRT FM(N)ADD/SUB. FM(N)ADD/SUB instructions count twice as they perform 2 calculations per element]
  fp_arith_inst_retired.scalar_single
       [Counts number of SSE/AVX computational scalar single precision floating-point instructions retired; some instructions will count twice as noted below. Each count represents 1 computational operation. Applies to SSE* and AVX*
        scalar single precision floating-point instructions: ADD SUB MUL DIV MIN MAX SQRT RSQRT RCP FM(N)ADD/SUB. FM(N)ADD/SUB instructions count twice as they perform 2 calculations per element]
  fp_arith_inst_retired.vector
       [Number of any Vector retired FP arithmetic instructions]
  fp_arith_inst_retired2.128b_packed_half
       [FP_ARITH_INST_RETIRED2.128B_PACKED_HALF]
  fp_arith_inst_retired2.256b_packed_half
       [FP_ARITH_INST_RETIRED2.256B_PACKED_HALF]
  fp_arith_inst_retired2.512b_packed_half
       [FP_ARITH_INST_RETIRED2.512B_PACKED_HALF]
  fp_arith_inst_retired2.complex_scalar_half
       [FP_ARITH_INST_RETIRED2.COMPLEX_SCALAR_HALF]
  fp_arith_inst_retired2.scalar
       [Number of all Scalar Half-Precision FP arithmetic instructions(1) retired - regular and complex]
  fp_arith_inst_retired2.scalar_half
       [FP_ARITH_INST_RETIRED2.SCALAR_HALF]
  fp_arith_inst_retired2.vector
       [Number of all Vector (also called packed) Half-Precision FP arithmetic instructions(1) retired]

frontend:
  baclears.any
       [Clears due to Unknown Branches]
  decode.lcp
       [Stalls caused by changing prefix length of the instruction]
  decode.ms_busy
       [Cycles the Microcode Sequencer is busy]
  dsb2mite_switches.penalty_cycles
       [DSB-to-MITE switch true penalty cycles]
  frontend_retired.any_dsb_miss
       [Retired Instructions who experienced DSB miss (Precise event)]
  frontend_retired.dsb_miss
       [Retired Instructions who experienced a critical DSB miss (Precise event)]
  frontend_retired.itlb_miss
       [Retired Instructions who experienced iTLB true miss (Precise event)]
  frontend_retired.l1i_miss
       [Retired Instructions who experienced Instruction L1 Cache true miss (Precise event)]
  frontend_retired.l2_miss
       [Retired Instructions who experienced Instruction L2 Cache true miss (Precise event)]
  frontend_retired.latency_ge_1
       [Retired instructions after front-end starvation of at least 1 cycle (Precise event)]
  frontend_retired.latency_ge_128
       [Retired instructions that are fetched after an interval where the front-end delivered no uops for a period of 128 cycles which was not interrupted by a back-end stall (Precise event)]
  frontend_retired.latency_ge_16
       [Retired instructions that are fetched after an interval where the front-end delivered no uops for a period of 16 cycles which was not interrupted by a back-end stall (Precise event)]
  frontend_retired.latency_ge_2
       [Retired instructions after front-end starvation of at least 2 cycles (Precise event)]
  frontend_retired.latency_ge_256
       [Retired instructions that are fetched after an interval where the front-end delivered no uops for a period of 256 cycles which was not interrupted by a back-end stall (Precise event)]
  frontend_retired.latency_ge_2_bubbles_ge_1
       [Retired instructions that are fetched after an interval where the front-end had at least 1 bubble-slot for a period of 2 cycles which was not interrupted by a back-end stall (Precise event)]
  frontend_retired.latency_ge_32
       [Retired instructions that are fetched after an interval where the front-end delivered no uops for a period of 32 cycles which was not interrupted by a back-end stall (Precise event)]
  frontend_retired.latency_ge_4
       [Retired instructions that are fetched after an interval where the front-end delivered no uops for a period of 4 cycles which was not interrupted by a back-end stall (Precise event)]
  frontend_retired.latency_ge_512
       [Retired instructions that are fetched after an interval where the front-end delivered no uops for a period of 512 cycles which was not interrupted by a back-end stall (Precise event)]
  frontend_retired.latency_ge_64
       [Retired instructions that are fetched after an interval where the front-end delivered no uops for a period of 64 cycles which was not interrupted by a back-end stall (Precise event)]
  frontend_retired.latency_ge_8
       [Retired instructions that are fetched after an interval where the front-end delivered no uops for a period of 8 cycles which was not interrupted by a back-end stall (Precise event)]
  frontend_retired.ms_flows
       [FRONTEND_RETIRED.MS_FLOWS (Precise event)]
  frontend_retired.stlb_miss
       [Retired Instructions who experienced STLB (2nd level TLB) true miss (Precise event)]
  frontend_retired.unknown_branch
       [FRONTEND_RETIRED.UNKNOWN_BRANCH (Precise event)]
  icache_data.stalls
       [Cycles where a code fetch is stalled due to L1 instruction cache miss]
  icache_tag.stalls
       [Cycles where a code fetch is stalled due to L1 instruction cache tag miss]
  idq.dsb_cycles_any
       [Cycles Decode Stream Buffer (DSB) is delivering any Uop]
  idq.dsb_cycles_ok
       [Cycles DSB is delivering optimal number of Uops]
  idq.dsb_uops
       [Uops delivered to Instruction Decode Queue (IDQ) from the Decode Stream Buffer (DSB) path]
  idq.mite_cycles_any
       [Cycles MITE is delivering any Uop]
  idq.mite_cycles_ok
       [Cycles MITE is delivering optimal number of Uops]
  idq.mite_uops
       [Uops delivered to Instruction Decode Queue (IDQ) from MITE path]
  idq.ms_cycles_any
       [Cycles when uops are being delivered to IDQ while MS is busy]
  idq.ms_switches
       [Number of switches from DSB or MITE to the MS]
  idq.ms_uops
       [Uops delivered to IDQ while MS is busy]
  idq_bubbles.core
       [Uops not delivered by IDQ when backend of the machine is not stalled [This event is alias to IDQ_UOPS_NOT_DELIVERED.CORE]]
  idq_bubbles.cycles_0_uops_deliv.core
       [Cycles when no uops are not delivered by the IDQ when backend of the machine is not stalled [This event is alias to IDQ_UOPS_NOT_DELIVERED.CYCLES_0_UOPS_DELIV.CORE]]
  idq_bubbles.cycles_fe_was_ok
       [Cycles when optimal number of uops was delivered to the back-end when the back-end is not stalled [This event is alias to IDQ_UOPS_NOT_DELIVERED.CYCLES_FE_WAS_OK]]
  idq_uops_not_delivered.core
       [Uops not delivered by IDQ when backend of the machine is not stalled [This event is alias to IDQ_BUBBLES.CORE]]
  idq_uops_not_delivered.cycles_0_uops_deliv.core
       [Cycles when no uops are not delivered by the IDQ when backend of the machine is not stalled [This event is alias to IDQ_BUBBLES.CYCLES_0_UOPS_DELIV.CORE]]
  idq_uops_not_delivered.cycles_fe_was_ok
       [Cycles when optimal number of uops was delivered to the back-end when the back-end is not stalled [This event is alias to IDQ_BUBBLES.CYCLES_FE_WAS_OK]]

memory:
  cycle_activity.stalls_l3_miss
       [Execution stalls while L3 cache miss demand load is outstanding]
  machine_clears.memory_ordering
       [Number of machine clears due to memory ordering conflicts]
  mem_trans_retired.load_latency_gt_128
       [Counts randomly selected loads when the latency from first dispatch to completion is greater than 128 cycles Supports address when precise (Must be precise)]
  mem_trans_retired.load_latency_gt_16
       [Counts randomly selected loads when the latency from first dispatch to completion is greater than 16 cycles Supports address when precise (Must be precise)]
  mem_trans_retired.load_latency_gt_256
       [Counts randomly selected loads when the latency from first dispatch to completion is greater than 256 cycles Supports address when precise (Must be precise)]
  mem_trans_retired.load_latency_gt_32
       [Counts randomly selected loads when the latency from first dispatch to completion is greater than 32 cycles Supports address when precise (Must be precise)]
  mem_trans_retired.load_latency_gt_4
       [Counts randomly selected loads when the latency from first dispatch to completion is greater than 4 cycles Supports address when precise (Must be precise)]
  mem_trans_retired.load_latency_gt_512
       [Counts randomly selected loads when the latency from first dispatch to completion is greater than 512 cycles Supports address when precise (Must be precise)]
  mem_trans_retired.load_latency_gt_64
       [Counts randomly selected loads when the latency from first dispatch to completion is greater than 64 cycles Supports address when precise (Must be precise)]
  mem_trans_retired.load_latency_gt_8
       [Counts randomly selected loads when the latency from first dispatch to completion is greater than 8 cycles Supports address when precise (Must be precise)]
  mem_trans_retired.store_sample
       [Retired memory store access operations. A PDist event for PEBS Store Latency Facility Supports address when precise (Must be precise)]
  memory_activity.cycles_l1d_miss
       [Cycles while L1 cache miss demand load is outstanding]
  memory_activity.stalls_l1d_miss
       [Execution stalls while L1 cache miss demand load is outstanding]
  memory_activity.stalls_l2_miss
       [Execution stalls while L2 cache miss demand cacheable load request is outstanding]
  memory_activity.stalls_l3_miss
       [Execution stalls while L3 cache miss demand cacheable load request is outstanding]
  ocr.demand_code_rd.l3_miss
       [Counts demand instruction fetches and L1 instruction cache prefetches that were not supplied by the local socket's L1, L2, or L3 caches]
  ocr.demand_data_rd.l3_miss
       [Counts demand data reads that were not supplied by the local socket's L1, L2, or L3 caches]
  ocr.demand_rfo.l3_miss
       [Counts demand reads for ownership (RFO) requests and software prefetches for exclusive ownership (PREFETCHW) that were not supplied by the local socket's L1, L2, or L3 caches]
  ocr.hwpf_l3.l3_miss
       [Counts hardware prefetches to the L3 only that missed the local socket's L1, L2, and L3 caches]
  ocr.hwpf_l3.l3_miss_local
       [Counts hardware prefetches to the L3 only that were not supplied by the local socket's L1, L2, or L3 caches and the cacheline is homed locally]
  ocr.reads_to_core.l3_miss
       [Counts all (cacheable) data read, code read and RFO requests including demands and prefetches to the core caches (L1 or L2) that were not supplied by the local socket's L1, L2, or L3 caches]
  ocr.reads_to_core.l3_miss_local
       [Counts all (cacheable) data read, code read and RFO requests including demands and prefetches to the core caches (L1 or L2) that were not supplied by the local socket's L1, L2, or L3 caches and the cacheline is homed locally]
  ocr.reads_to_core.l3_miss_local_socket
       [Counts all (cacheable) data read, code read and RFO requests including demands and prefetches to the core caches (L1 or L2) that missed the L3 Cache and were supplied by the local socket (DRAM or PMM), whether or not in Sub
        NUMA Cluster(SNC) Mode. In SNC Mode counts PMM or DRAM accesses that are controlled by the close or distant SNC Cluster. It does not count misses to the L3 which go to Local CXL Type 2 Memory or Local Non DRAM]
  ocr.streaming_wr.l3_miss
       [Counts streaming stores that missed the local socket's L1, L2, and L3 caches]
  ocr.streaming_wr.l3_miss_local
       [Counts streaming stores that were not supplied by the local socket's L1, L2, or L3 caches and the cacheline is homed locally]
  offcore_requests.l3_miss_demand_data_rd
       [Counts demand data read requests that miss the L3 cache]
  offcore_requests_outstanding.l3_miss_demand_data_rd
       [For every cycle, increments by the number of demand data read requests pending that are known to have missed the L3 cache]
  rtm_retired.aborted
       [Number of times an RTM execution aborted]
  rtm_retired.aborted_events
       [Number of times an RTM execution aborted due to none of the previous 4 categories (e.g. interrupt)]
  rtm_retired.aborted_mem
       [Number of times an RTM execution aborted due to various memory events (e.g. read/write capacity and conflicts)]
  rtm_retired.aborted_memtype
       [Number of times an RTM execution aborted due to incompatible memory type]
  rtm_retired.aborted_unfriendly
       [Number of times an RTM execution aborted due to HLE-unfriendly instructions]
  rtm_retired.commit
       [Number of times an RTM execution successfully committed]
  rtm_retired.start
       [Number of times an RTM execution started]
  tx_mem.abort_capacity_read
       [Speculatively counts the number of TSX aborts due to a data capacity limitation for transactional reads]
  tx_mem.abort_capacity_write
       [Speculatively counts the number of TSX aborts due to a data capacity limitation for transactional writes]
  tx_mem.abort_conflict
       [Number of times a transactional abort was signaled due to a data conflict on a transactionally accessed address]

other:
  assists.page_fault
       [ASSISTS.PAGE_FAULT]
  exe.amx_busy
       [Counts the cycles where the AMX (Advance Matrix Extension) unit is busy performing an operation]
  ocr.demand_code_rd.any_response
       [Counts demand instruction fetches and L1 instruction cache prefetches that have any type of response]
  ocr.demand_code_rd.dram
       [Counts demand instruction fetches and L1 instruction cache prefetches that were supplied by DRAM]
  ocr.demand_code_rd.local_dram
       [Counts demand instruction fetches and L1 instruction cache prefetches that were supplied by DRAM attached to this socket, unless in Sub NUMA Cluster(SNC) Mode. In SNC Mode counts only those DRAM accesses that are controlled by
        the close SNC Cluster]
  ocr.demand_code_rd.snc_dram
       [Counts demand instruction fetches and L1 instruction cache prefetches that were supplied by DRAM on a distant memory controller of this socket when the system is in SNC (sub-NUMA cluster) mode]
  ocr.demand_data_rd.any_response
       [Counts demand data reads that have any type of response]
  ocr.demand_data_rd.dram
       [Counts demand data reads that were supplied by DRAM]
  ocr.demand_data_rd.local_dram
       [Counts demand data reads that were supplied by DRAM attached to this socket, unless in Sub NUMA Cluster(SNC) Mode. In SNC Mode counts only those DRAM accesses that are controlled by the close SNC Cluster]
  ocr.demand_data_rd.remote_dram
       [Counts demand data reads that were supplied by DRAM attached to another socket]
  ocr.demand_data_rd.snc_dram
       [Counts demand data reads that were supplied by DRAM on a distant memory controller of this socket when the system is in SNC (sub-NUMA cluster) mode]
  ocr.demand_rfo.any_response
       [Counts demand reads for ownership (RFO) requests and software prefetches for exclusive ownership (PREFETCHW) that have any type of response]
  ocr.demand_rfo.dram
       [Counts demand reads for ownership (RFO) requests and software prefetches for exclusive ownership (PREFETCHW) that were supplied by DRAM]
  ocr.demand_rfo.local_dram
       [Counts demand reads for ownership (RFO) requests and software prefetches for exclusive ownership (PREFETCHW) that were supplied by DRAM attached to this socket, unless in Sub NUMA Cluster(SNC) Mode. In SNC Mode counts only
        those DRAM accesses that are controlled by the close SNC Cluster]
  ocr.demand_rfo.snc_dram
       [Counts demand reads for ownership (RFO) requests and software prefetches for exclusive ownership (PREFETCHW) that were supplied by DRAM on a distant memory controller of this socket when the system is in SNC (sub-NUMA cluster)
        mode]
  ocr.hwpf_l1d.any_response
       [Counts data load hardware prefetch requests to the L1 data cache that have any type of response]
  ocr.hwpf_l2.any_response
       [Counts hardware prefetches (which bring data to L2) that have any type of response]
  ocr.hwpf_l3.any_response
       [Counts hardware prefetches to the L3 only that have any type of response]
  ocr.hwpf_l3.remote
       [Counts hardware prefetches to the L3 only that were not supplied by the local socket's L1, L2, or L3 caches and the cacheline was homed in a remote socket]
  ocr.modified_write.any_response
       [Counts writebacks of modified cachelines and streaming stores that have any type of response]
  ocr.reads_to_core.any_response
       [Counts all (cacheable) data read, code read and RFO requests including demands and prefetches to the core caches (L1 or L2) that have any type of response]
  ocr.reads_to_core.dram
       [Counts all (cacheable) data read, code read and RFO requests including demands and prefetches to the core caches (L1 or L2) that were supplied by DRAM]
  ocr.reads_to_core.local_dram
       [Counts all (cacheable) data read, code read and RFO requests including demands and prefetches to the core caches (L1 or L2) that were supplied by DRAM attached to this socket, unless in Sub NUMA Cluster(SNC) Mode. In SNC Mode
        counts only those DRAM accesses that are controlled by the close SNC Cluster]
  ocr.reads_to_core.local_socket_dram
       [Counts all (cacheable) data read, code read and RFO requests including demands and prefetches to the core caches (L1 or L2) that were supplied by DRAM attached to this socket, whether or not in Sub NUMA Cluster(SNC) Mode. In
        SNC Mode counts DRAM accesses that are controlled by the close or distant SNC Cluster]
  ocr.reads_to_core.remote
       [Counts all (cacheable) data read, code read and RFO requests including demands and prefetches to the core caches (L1 or L2) that were not supplied by the local socket's L1, L2, or L3 caches and were supplied by a remote socket]
  ocr.reads_to_core.remote_dram
       [Counts all (cacheable) data read, code read and RFO requests including demands and prefetches to the core caches (L1 or L2) that were supplied by DRAM attached to another socket]
  ocr.reads_to_core.remote_memory
       [Counts all (cacheable) data read, code read and RFO requests including demands and prefetches to the core caches (L1 or L2) that were supplied by DRAM or PMM attached to another socket]
  ocr.reads_to_core.snc_dram
       [Counts all (cacheable) data read, code read and RFO requests including demands and prefetches to the core caches (L1 or L2) that were supplied by DRAM on a distant memory controller of this socket when the system is in SNC
        (sub-NUMA cluster) mode]
  ocr.streaming_wr.any_response
       [Counts streaming stores that have any type of response]
  ocr.write_estimate.memory
       [Counts Demand RFOs, ItoM's, PREFECTHW's, Hardware RFO Prefetches to the L1/L2 and Streaming stores that likely resulted in a store to Memory (DRAM or PMM)]
  rs.empty
       [Cycles when Reservation Station (RS) is empty for the thread]
  rs.empty_count
       [Counts end of periods where the Reservation Station (RS) was empty]
  xq.full_cycles
       [Cycles the uncore cannot take further requests]

pipeline:
  arith.div_active
       [Cycles when divide unit is busy executing divide or square root operations]
  arith.idiv_active
       [This event counts the cycles the integer divider is busy]
  assists.any
       [Number of occurrences where a microcode assist is invoked by hardware]
  br_inst_retired.all_branches
       [All branch instructions retired (Precise event)]
  br_inst_retired.cond
       [Conditional branch instructions retired (Precise event)]
  br_inst_retired.cond_ntaken
       [Not taken branch instructions retired (Precise event)]
  br_inst_retired.cond_taken
       [Taken conditional branch instructions retired (Precise event)]
  br_inst_retired.far_branch
       [Far branch instructions retired (Precise event)]
  br_inst_retired.indirect
       [Indirect near branch instructions retired (excluding returns) (Precise event)]
  br_inst_retired.near_call
       [Direct and indirect near call instructions retired (Precise event)]
  br_inst_retired.near_return
       [Return instructions retired (Precise event)]
  br_inst_retired.near_taken
       [Taken branch instructions retired (Precise event)]
  br_misp_retired.all_branches
       [All mispredicted branch instructions retired (Precise event)]
  br_misp_retired.cond
       [Mispredicted conditional branch instructions retired (Precise event)]
  br_misp_retired.cond_ntaken
       [Mispredicted non-taken conditional branch instructions retired (Precise event)]
  br_misp_retired.cond_taken
       [number of branch instructions retired that were mispredicted and taken (Precise event)]
  br_misp_retired.indirect
       [Miss-predicted near indirect branch instructions retired (excluding returns) (Precise event)]
  br_misp_retired.indirect_call
       [Mispredicted indirect CALL retired (Precise event)]
  br_misp_retired.near_taken
       [Number of near branch instructions retired that were mispredicted and taken (Precise event)]
  br_misp_retired.ret
       [This event counts the number of mispredicted ret instructions retired. Non PEBS (Precise event)]
  cpu_clk_unhalted.c01
       [Core clocks when the thread is in the C0.1 light-weight slower wakeup time but more power saving optimized state]
  cpu_clk_unhalted.c02
       [Core clocks when the thread is in the C0.2 light-weight faster wakeup time but less power saving optimized state]
  cpu_clk_unhalted.c0_wait
       [Core clocks when the thread is in the C0.1 or C0.2 or running a PAUSE in C0 ACPI state]
  cpu_clk_unhalted.distributed
       [Cycle counts are evenly distributed between active threads in the Core]
  cpu_clk_unhalted.one_thread_active
       [Core crystal clock cycles when this thread is unhalted and the other thread is halted]
  cpu_clk_unhalted.pause
       [CPU_CLK_UNHALTED.PAUSE]
  cpu_clk_unhalted.pause_inst
       [CPU_CLK_UNHALTED.PAUSE_INST]
  cpu_clk_unhalted.ref_distributed
       [Core crystal clock cycles. Cycle counts are evenly distributed between active threads in the Core]
  cpu_clk_unhalted.ref_tsc
       [Reference cycles when the core is not in halt state]
  cpu_clk_unhalted.ref_tsc_p
       [Reference cycles when the core is not in halt state]
  cpu_clk_unhalted.thread
       [Core cycles when the thread is not in halt state]
  cpu_clk_unhalted.thread_p
       [Thread cycles when thread is not in halt state]
  cycle_activity.cycles_l1d_miss
       [Cycles while L1 cache miss demand load is outstanding]
  cycle_activity.cycles_l2_miss
       [Cycles while L2 cache miss demand load is outstanding]
  cycle_activity.cycles_mem_any
       [Cycles while memory subsystem has an outstanding load]
  cycle_activity.stalls_l1d_miss
       [Execution stalls while L1 cache miss demand load is outstanding]
  cycle_activity.stalls_l2_miss
       [Execution stalls while L2 cache miss demand load is outstanding]
  cycle_activity.stalls_total
       [Total execution stalls]
  exe_activity.1_ports_util
       [Cycles total of 1 uop is executed on all ports and Reservation Station was not empty]
  exe_activity.2_ports_util
       [Cycles total of 2 uops are executed on all ports and Reservation Station was not empty]
  exe_activity.3_ports_util
       [Cycles total of 3 uops are executed on all ports and Reservation Station was not empty]
  exe_activity.4_ports_util
       [Cycles total of 4 uops are executed on all ports and Reservation Station was not empty]
  exe_activity.bound_on_loads
       [Execution stalls while memory subsystem has an outstanding load]
  exe_activity.bound_on_stores
       [Cycles where the Store Buffer was full and no loads caused an execution stall]
  exe_activity.exe_bound_0_ports
       [Cycles no uop executed while RS was not empty, the SB was not full and there was no outstanding load]
  inst_decoded.decoders
       [Instruction decoders utilized in a cycle]
  inst_retired.any
       [Number of instructions retired. Fixed Counter - architectural event (Precise event)]
  inst_retired.any_p
       [Number of instructions retired. General Counter - architectural event (Precise event)]
  inst_retired.macro_fused
       [INST_RETIRED.MACRO_FUSED]
  inst_retired.nop
       [Retired NOP instructions]
  inst_retired.prec_dist
       [Precise instruction retired with PEBS precise-distribution (Precise event)]
  inst_retired.rep_iteration
       [Iterations of Repeat string retired instructions]
  int_misc.clear_resteer_cycles
       [Counts cycles after recovery from a branch misprediction or machine clear till the first uop is issued from the resteered path]
  int_misc.clears_count
       [Clears speculative count]
  int_misc.mba_stalls
       [INT_MISC.MBA_STALLS]
  int_misc.recovery_cycles
       [Core cycles the allocator was stalled due to recovery from earlier clear event for this thread]
  int_misc.unknown_branch_cycles
       [Bubble cycles of BAClear (Unknown Branch)]
  int_misc.uop_dropping
       [TMA slots where uops got dropped]
  int_vec_retired.128bit
       [INT_VEC_RETIRED.128BIT]
  int_vec_retired.256bit
       [INT_VEC_RETIRED.256BIT]
  int_vec_retired.add_128
       [integer ADD, SUB, SAD 128-bit vector instructions]
  int_vec_retired.add_256
       [integer ADD, SUB, SAD 256-bit vector instructions]
  int_vec_retired.mul_256
       [INT_VEC_RETIRED.MUL_256]
  int_vec_retired.shuffles
       [INT_VEC_RETIRED.SHUFFLES]
  int_vec_retired.vnni_128
       [INT_VEC_RETIRED.VNNI_128]
  int_vec_retired.vnni_256
       [INT_VEC_RETIRED.VNNI_256]
  ld_blocks.address_alias
       [False dependencies in MOB due to partial compare on address]
  ld_blocks.no_sr
       [The number of times that split load operations are temporarily blocked because all resources for handling the split accesses are in use]
  ld_blocks.store_forward
       [Loads blocked due to overlapping with a preceding store that cannot be forwarded]
  load_hit_prefetch.swpf
       [Counts the number of demand load dispatches that hit L1D fill buffer (FB) allocated for software prefetch]
  lsd.cycles_active
       [Cycles Uops delivered by the LSD, but didn't come from the decoder]
  lsd.cycles_ok
       [Cycles optimal number of Uops delivered by the LSD, but did not come from the decoder]
  lsd.uops
       [Number of Uops delivered by the LSD]
  machine_clears.count
       [Number of machine clears (nukes) of any type]
  machine_clears.smc
       [Self-modifying code (SMC) detected]
  misc2_retired.lfence
       [LFENCE instructions retired]
  misc_retired.lbr_inserts
       [Increments whenever there is an update to the LBR array]
  resource_stalls.sb
       [Cycles stalled due to no store buffers available. (not including draining form sync)]
  resource_stalls.scoreboard
       [Counts cycles where the pipeline is stalled due to serializing operations]
  topdown.backend_bound_slots
       [TMA slots where no uops were being issued due to lack of back-end resources]
  topdown.bad_spec_slots
       [TMA slots wasted due to incorrect speculations]
  topdown.br_mispredict_slots
       [TMA slots wasted due to incorrect speculation by branch mispredictions]
  topdown.memory_bound_slots
       [TOPDOWN.MEMORY_BOUND_SLOTS]
  topdown.slots
       [TMA slots available for an unhalted logical processor. Fixed counter - architectural event]
  topdown.slots_p
       [TMA slots available for an unhalted logical processor. General counter - architectural event]
  uops_decoded.dec0_uops
       [UOPS_DECODED.DEC0_UOPS]
  uops_dispatched.port_0
       [Uops executed on port 0]
  uops_dispatched.port_1
       [Uops executed on port 1]
  uops_dispatched.port_2_3_10
       [Uops executed on ports 2, 3 and 10]
  uops_dispatched.port_4_9
       [Uops executed on ports 4 and 9]
  uops_dispatched.port_5_11
       [Uops executed on ports 5 and 11]
  uops_dispatched.port_6
       [Uops executed on port 6]
  uops_dispatched.port_7_8
       [Uops executed on ports 7 and 8]
  uops_executed.core
       [Number of uops executed on the core]
  uops_executed.core_cycles_ge_1
       [Cycles at least 1 micro-op is executed from any thread on physical core]
  uops_executed.core_cycles_ge_2
       [Cycles at least 2 micro-op is executed from any thread on physical core]
  uops_executed.core_cycles_ge_3
       [Cycles at least 3 micro-op is executed from any thread on physical core]
  uops_executed.core_cycles_ge_4
       [Cycles at least 4 micro-op is executed from any thread on physical core]
  uops_executed.cycles_ge_1
       [Cycles where at least 1 uop was executed per-thread]
  uops_executed.cycles_ge_2
       [Cycles where at least 2 uops were executed per-thread]
  uops_executed.cycles_ge_3
       [Cycles where at least 3 uops were executed per-thread]
  uops_executed.cycles_ge_4
       [Cycles where at least 4 uops were executed per-thread]
  uops_executed.stalls
       [Counts number of cycles no uops were dispatched to be executed on this thread]
  uops_executed.thread
       [Counts the number of uops to be executed per-thread each cycle]
  uops_executed.x87
       [Counts the number of x87 uops dispatched]
  uops_issued.any
       [Uops that RAT issues to RS]
  uops_retired.cycles
       [Cycles with retired uop(s)]
  uops_retired.heavy
       [Retired uops except the last uop of each instruction]
  uops_retired.ms
       [UOPS_RETIRED.MS]
  uops_retired.slots
       [Retirement slots used]
  uops_retired.stalls
       [Cycles without actually retired uops]

uncore cache:
  unc_cha_bypass_cha_imc.intermediate
       [CHA to iMC Bypass : Intermediate bypass Taken. Unit: uncore_cha]
  unc_cha_bypass_cha_imc.not_taken
       [CHA to iMC Bypass : Not Taken. Unit: uncore_cha]
  unc_cha_bypass_cha_imc.taken
       [CHA to iMC Bypass : Taken. Unit: uncore_cha]
  unc_cha_clockticks
       [CHA Clockticks. Unit: uncore_cha]
  unc_cha_cms_clockticks
       [CMS Clockticks. Unit: uncore_cha]
  unc_cha_core_snp.any_gtone
       [Core Cross Snoops Issued : Any Cycle with Multiple Snoops. Unit: uncore_cha]
  unc_cha_core_snp.any_one
       [Core Cross Snoops Issued : Any Single Snoop. Unit: uncore_cha]
  unc_cha_core_snp.core_gtone
       [Core Cross Snoops Issued : Multiple Core Requests. Unit: uncore_cha]
  unc_cha_core_snp.core_one
       [Core Cross Snoops Issued : Single Core Requests. Unit: uncore_cha]
  unc_cha_core_snp.evict_gtone
       [Core Cross Snoops Issued : Multiple Eviction. Unit: uncore_cha]
  unc_cha_core_snp.evict_one
       [Core Cross Snoops Issued : Single Eviction. Unit: uncore_cha]
  unc_cha_core_snp.ext_gtone
       [Core Cross Snoops Issued : Multiple External Snoops. Unit: uncore_cha]
  unc_cha_core_snp.ext_one
       [Core Cross Snoops Issued : Single External Snoops. Unit: uncore_cha]
  unc_cha_core_snp.remote_gtone
       [Core Cross Snoops Issued : Multiple Snoop Targets from Remote. Unit: uncore_cha]
  unc_cha_core_snp.remote_one
       [Core Cross Snoops Issued : Single Snoop Target from Remote. Unit: uncore_cha]
  unc_cha_dir_lookup.no_snp
       [Multi-socket cacheline Directory state lookups; Snoop Not Needed. Unit: uncore_cha]
  unc_cha_dir_lookup.snp
       [Multi-socket cacheline Directory state lookups; Snoop Needed. Unit: uncore_cha]
  unc_cha_dir_update.ha
       [Multi-socket cacheline Directory state updates; Directory Updated memory write from the HA pipe. Unit: uncore_cha]
  unc_cha_dir_update.tor
       [Multi-socket cacheline Directory state updates; Directory Updated memory write from TOR pipe. Unit: uncore_cha]
  unc_cha_direct_go.ha_suppress_drd
       [Direct GO. Unit: uncore_cha]
  unc_cha_direct_go.ha_suppress_no_d2c
       [Direct GO. Unit: uncore_cha]
  unc_cha_direct_go.ha_tor_dealloc
       [Direct GO. Unit: uncore_cha]
  unc_cha_direct_go_opc.extcmp
       [Direct GO. Unit: uncore_cha]
  unc_cha_direct_go_opc.fast_go
       [Direct GO. Unit: uncore_cha]
  unc_cha_direct_go_opc.fast_go_pull
       [Direct GO. Unit: uncore_cha]
  unc_cha_direct_go_opc.go
       [Direct GO. Unit: uncore_cha]
  unc_cha_direct_go_opc.go_pull
       [Direct GO. Unit: uncore_cha]
  unc_cha_direct_go_opc.idle_due_suppress
       [Direct GO. Unit: uncore_cha]
  unc_cha_direct_go_opc.nop
       [Direct GO. Unit: uncore_cha]
  unc_cha_direct_go_opc.pull
       [Direct GO. Unit: uncore_cha]
  unc_cha_egress_ordering.iv_snoopgo_dn
       [Egress Blocking due to Ordering requirements : Down. Unit: uncore_cha]
  unc_cha_egress_ordering.iv_snoopgo_up
       [Egress Blocking due to Ordering requirements : Up. Unit: uncore_cha]
  unc_cha_hitme_hit.ex_rds
       [Read request from a remote socket which hit in the HitMe Cache to a line In the E state. Unit: uncore_cha]
  unc_cha_hitme_hit.shared_ownreq
       [Counts Number of Hits in HitMe Cache : Shared hit and op is RdInvOwn, RdInv, Inv*. Unit: uncore_cha]
  unc_cha_hitme_hit.wbmtoe
       [Counts Number of Hits in HitMe Cache : op is WbMtoE. Unit: uncore_cha]
  unc_cha_hitme_hit.wbmtoi_or_s
       [Counts Number of Hits in HitMe Cache : op is WbMtoI, WbPushMtoI, WbFlush, or WbMtoS. Unit: uncore_cha]
  unc_cha_hitme_lookup.read
       [Counts Number of times HitMe Cache is accessed : op is RdCode, RdData, RdDataMigratory, RdCur, RdInvOwn, RdInv, Inv*. Unit: uncore_cha]
  unc_cha_hitme_lookup.write
       [Counts Number of times HitMe Cache is accessed : op is WbMtoE, WbMtoI, WbPushMtoI, WbFlush, or WbMtoS. Unit: uncore_cha]
  unc_cha_hitme_miss.notshared_rdinvown
       [Counts Number of Misses in HitMe Cache : No SF/LLC HitS/F and op is RdInvOwn. Unit: uncore_cha]
  unc_cha_hitme_miss.read_or_inv
       [Counts Number of Misses in HitMe Cache : op is RdCode, RdData, RdDataMigratory, RdCur, RdInv, Inv*. Unit: uncore_cha]
  unc_cha_hitme_miss.shared_rdinvown
       [Counts Number of Misses in HitMe Cache : SF/LLC HitS/F and op is RdInvOwn. Unit: uncore_cha]
  unc_cha_hitme_update.deallocate
       [Counts the number of Allocate/Update to HitMe Cache : Deallocate HitME$ on Reads without RspFwdI*. Unit: uncore_cha]
  unc_cha_hitme_update.deallocate_rspfwdi_loc
       [Counts the number of Allocate/Update to HitMe Cache : op is RspIFwd or RspIFwdWb for a local request. Unit: uncore_cha]
  unc_cha_hitme_update.rdinvown
       [Counts the number of Allocate/Update to HitMe Cache : Update HitMe Cache on RdInvOwn even if not RspFwdI*. Unit: uncore_cha]
  unc_cha_hitme_update.rspfwdi_rem
       [Counts the number of Allocate/Update to HitMe Cache : op is RspIFwd or RspIFwdWb for a remote request. Unit: uncore_cha]
  unc_cha_hitme_update.shared
       [Counts the number of Allocate/Update to HitMe Cache : Update HitMe Cache to SHARed. Unit: uncore_cha]
  unc_cha_imc_reads_count.normal
       [Normal priority reads issued to the memory controller from the CHA. Unit: uncore_cha]
  unc_cha_imc_reads_count.priority
       [HA to iMC Reads Issued : ISOCH. Unit: uncore_cha]
  unc_cha_imc_writes_count.full
       [CHA to iMC Full Line Writes Issued; Full Line Non-ISOCH. Unit: uncore_cha]
  unc_cha_imc_writes_count.full_priority
       [CHA to iMC Full Line Writes Issued : ISOCH Full Line. Unit: uncore_cha]
  unc_cha_imc_writes_count.partial
       [CHA to iMC Full Line Writes Issued : Partial Non-ISOCH. Unit: uncore_cha]
  unc_cha_imc_writes_count.partial_priority
       [CHA to iMC Full Line Writes Issued : ISOCH Partial. Unit: uncore_cha]
  unc_cha_llc_lookup.all
       [Cache and Snoop Filter Lookups; Any Request. Unit: uncore_cha]
  unc_cha_llc_lookup.all_remote
       [Cache Lookups : All transactions from Remote Agents. Unit: uncore_cha]
  unc_cha_llc_lookup.any_f
       [Cache Lookups : All Requests. Unit: uncore_cha]
  unc_cha_llc_lookup.code
       [Cache Lookups : CRd Requests. Unit: uncore_cha]
  unc_cha_llc_lookup.code_read_f
       [Cache Lookups : CRd Requests. Unit: uncore_cha]
  unc_cha_llc_lookup.corepref_or_dmnd_local_f
       [Cache Lookups : Local non-prefetch requests. Unit: uncore_cha]
  unc_cha_llc_lookup.data_rd
       [Cache and Snoop Filter Lookups; Data Read Request. Unit: uncore_cha]
  unc_cha_llc_lookup.data_read_all
       [Cache Lookups : Data Reads. Unit: uncore_cha]
  unc_cha_llc_lookup.data_read_f
       [Cache Lookups : Data Read Request. Unit: uncore_cha]
  unc_cha_llc_lookup.data_read_local
       [Cache Lookups : Demand Data Reads, Core and LLC prefetches. Unit: uncore_cha]
  unc_cha_llc_lookup.data_read_miss
       [Cache Lookups : Data Read Misses. Unit: uncore_cha]
  unc_cha_llc_lookup.e
       [Cache Lookups : E State. Unit: uncore_cha]
  unc_cha_llc_lookup.f
       [Cache Lookups : F State. Unit: uncore_cha]
  unc_cha_llc_lookup.flush_inv
       [Cache Lookups : Flush or Invalidate Requests. Unit: uncore_cha]
  unc_cha_llc_lookup.flush_or_inv_f
       [Cache Lookups : Flush. Unit: uncore_cha]
  unc_cha_llc_lookup.i
       [Cache Lookups : I State. Unit: uncore_cha]
  unc_cha_llc_lookup.llcpref_local_f
       [Cache Lookups : Local LLC prefetch requests (from LLC). Unit: uncore_cha]
  unc_cha_llc_lookup.local_code
       [Cache Lookups : CRd Requests that come from the local socket (usually the core). Unit: uncore_cha]
  unc_cha_llc_lookup.local_data_rd
       [Cache and Snoop Filter Lookups; Data Read Request that come from the local socket (usually the core). Unit: uncore_cha]
  unc_cha_llc_lookup.local_dmnd_code
       [Cache Lookups : Demand CRd Requests that come from the local socket (usually the core). Unit: uncore_cha]
  unc_cha_llc_lookup.local_dmnd_data_rd
       [Cache and Snoop Filter Lookups; Demand Data Reads that come from the local socket (usually the core). Unit: uncore_cha]
  unc_cha_llc_lookup.local_dmnd_rfo
       [Cache Lookups : Demand RFO Requests that come from the local socket (usually the core). Unit: uncore_cha]
  unc_cha_llc_lookup.local_f
       [Cache Lookups : Transactions homed locally. Unit: uncore_cha]
  unc_cha_llc_lookup.local_flush_inv
       [Cache Lookups : Flush or Invalidate Requests that come from the local socket (usually the core). Unit: uncore_cha]
  unc_cha_llc_lookup.local_llc_pf
       [Cache and Snoop Filter Lookups; Prefetch requests to the LLC that come from the local socket (usually the core). Unit: uncore_cha]
  unc_cha_llc_lookup.local_pf
       [Cache and Snoop Filter Lookups; Data Read Prefetches that come from the local socket (usually the core). Unit: uncore_cha]
  unc_cha_llc_lookup.local_pf_code
       [Cache Lookups : CRd Prefetches that come from the local socket (usually the core). Unit: uncore_cha]
  unc_cha_llc_lookup.local_pf_data_rd
       [Cache and Snoop Filter Lookups; Data Read Prefetches that come from the local socket (usually the core). Unit: uncore_cha]
  unc_cha_llc_lookup.local_pf_rfo
       [Cache Lookups : RFO Prefetches that come from the local socket (usually the core). Unit: uncore_cha]
  unc_cha_llc_lookup.local_rfo
       [Cache Lookups : RFO Requests that come from the local socket (usually the core). Unit: uncore_cha]
  unc_cha_llc_lookup.locally_homed_address
       [Cache Lookups : Transactions homed locally. Unit: uncore_cha]
  unc_cha_llc_lookup.m
       [Cache Lookups : M State. Unit: uncore_cha]
  unc_cha_llc_lookup.miss_all
       [Cache Lookups : All Misses. Unit: uncore_cha]
  unc_cha_llc_lookup.other_req_f
       [Cache Lookups : Write Requests. Unit: uncore_cha]
  unc_cha_llc_lookup.pref_or_dmnd_remote_f
       [Cache Lookups : Remote non-snoop requests. Unit: uncore_cha]
  unc_cha_llc_lookup.remote_code
       [Cache Lookups : CRd Requests that come from a Remote socket. Unit: uncore_cha]
  unc_cha_llc_lookup.remote_data_rd
       [Cache and Snoop Filter Lookups; Data Read Requests that come from a Remote socket. Unit: uncore_cha]
  unc_cha_llc_lookup.remote_f
       [Cache Lookups : Transactions homed remotely. Unit: uncore_cha]
  unc_cha_llc_lookup.remote_flush_inv
       [Cache Lookups : Flush or Invalidate requests that come from a Remote socket. Unit: uncore_cha]
  unc_cha_llc_lookup.remote_other
       [Cache Lookups : Filters Requests for those that write info into the cache that come from a remote socket. Unit: uncore_cha]
  unc_cha_llc_lookup.remote_rfo
       [Cache Lookups : RFO Requests that come from a Remote socket. Unit: uncore_cha]
  unc_cha_llc_lookup.remote_snoop_f
       [Cache Lookups : Remote snoop requests. Unit: uncore_cha]
  unc_cha_llc_lookup.remote_snp
       [Cache and Snoop Filter Lookups; Snoop Requests from a Remote Socket. Unit: uncore_cha]
  unc_cha_llc_lookup.remotely_homed_address
       [Cache Lookups : Transactions homed remotely. Unit: uncore_cha]
  unc_cha_llc_lookup.rfo
       [Cache Lookups : RFO Requests. Unit: uncore_cha]
  unc_cha_llc_lookup.rfo_f
       [Cache Lookups : RFO Request Filter. Unit: uncore_cha]
  unc_cha_llc_lookup.rfo_local
       [Cache Lookups : Locally HOMed RFOs - Demand and Prefetches. Unit: uncore_cha]
  unc_cha_llc_lookup.s
       [Cache Lookups : S State. Unit: uncore_cha]
  unc_cha_llc_lookup.sf_e
       [Cache Lookups : SnoopFilter - E State. Unit: uncore_cha]
  unc_cha_llc_lookup.sf_h
       [Cache Lookups : SnoopFilter - H State. Unit: uncore_cha]
  unc_cha_llc_lookup.sf_s
       [Cache Lookups : SnoopFilter - S State. Unit: uncore_cha]
  unc_cha_llc_lookup.write_local
       [Cache Lookups : Writes. Unit: uncore_cha]
  unc_cha_llc_lookup.write_remote
       [Cache Lookups : Remote Writes. Unit: uncore_cha]
  unc_cha_llc_victims.e_state
       [Lines Victimized : Lines in E state. Unit: uncore_cha]
  unc_cha_llc_victims.ia
       [Lines Victimized : IA traffic. Unit: uncore_cha]
  unc_cha_llc_victims.io
       [Lines Victimized : IO traffic. Unit: uncore_cha]
  unc_cha_llc_victims.io_e
       [All LLC lines in E state that are victimized on a fill from an IO device. Unit: uncore_cha]
  unc_cha_llc_victims.io_fs
       [All LLC lines in F or S state that are victimized on a fill from an IO device. Unit: uncore_cha]
  unc_cha_llc_victims.io_m
       [All LLC lines in M state that are victimized on a fill from an IO device. Unit: uncore_cha]
  unc_cha_llc_victims.io_mesf
       [All LLC lines in any state that are victimized on a fill from an IO device. Unit: uncore_cha]
  unc_cha_llc_victims.local_all
       [Lines Victimized; Local - All Lines. Unit: uncore_cha]
  unc_cha_llc_victims.local_e
       [Lines Victimized. Unit: uncore_cha]
  unc_cha_llc_victims.local_m
       [Lines Victimized. Unit: uncore_cha]
  unc_cha_llc_victims.local_only
       [Lines Victimized : Local Only. Unit: uncore_cha]
  unc_cha_llc_victims.local_s
       [Lines Victimized. Unit: uncore_cha]
  unc_cha_llc_victims.m_state
       [Lines Victimized : Lines in M state. Unit: uncore_cha]
  unc_cha_llc_victims.remote_all
       [Lines Victimized; Remote - All Lines. Unit: uncore_cha]
  unc_cha_llc_victims.remote_e
       [Lines Victimized. Unit: uncore_cha]
  unc_cha_llc_victims.remote_m
       [Lines Victimized. Unit: uncore_cha]
  unc_cha_llc_victims.remote_only
       [Lines Victimized : Remote Only. Unit: uncore_cha]
  unc_cha_llc_victims.remote_s
       [Lines Victimized. Unit: uncore_cha]
  unc_cha_llc_victims.s_state
       [Lines Victimized : Lines in S State. Unit: uncore_cha]
  unc_cha_llc_victims.total_e
       [All LLC lines in E state that are victimized on a fill. Unit: uncore_cha]
  unc_cha_llc_victims.total_m
       [All LLC lines in M state that are victimized on a fill. Unit: uncore_cha]
  unc_cha_llc_victims.total_s
       [All LLC lines in S state that are victimized on a fill. Unit: uncore_cha]
  unc_cha_misc.cv0_pref_miss
       [Cbo Misc : CV0 Prefetch Miss. Unit: uncore_cha]
  unc_cha_misc.cv0_pref_vic
       [Cbo Misc : CV0 Prefetch Victim. Unit: uncore_cha]
  unc_cha_misc.rfo_hit_s
       [Number of times that an RFO hit in S state. Unit: uncore_cha]
  unc_cha_misc.rspi_was_fse
       [Cbo Misc : Silent Snoop Eviction. Unit: uncore_cha]
  unc_cha_misc.wc_aliasing
       [Cbo Misc : Write Combining Aliasing. Unit: uncore_cha]
  unc_cha_osb.local_invitoe
       [OSB Snoop Broadcast : Local InvItoE. Unit: uncore_cha]
  unc_cha_osb.local_read
       [OSB Snoop Broadcast : Local Rd. Unit: uncore_cha]
  unc_cha_osb.off_pwrheuristic
       [OSB Snoop Broadcast : Off. Unit: uncore_cha]
  unc_cha_osb.remote_read
       [OSB Snoop Broadcast : Remote Rd. Unit: uncore_cha]
  unc_cha_osb.remote_readinvitoe
       [OSB Snoop Broadcast : Remote Rd InvItoE. Unit: uncore_cha]
  unc_cha_osb.rfo_hits_snp_bcast
       [OSB Snoop Broadcast : RFO HitS Snoop Broadcast. Unit: uncore_cha]
  unc_cha_pmm_memmode_nm_invitox.local
       [UNC_CHA_PMM_MEMMODE_NM_INVITOX.LOCAL. Unit: uncore_cha]
  unc_cha_pmm_memmode_nm_invitox.remote
       [UNC_CHA_PMM_MEMMODE_NM_INVITOX.REMOTE. Unit: uncore_cha]
  unc_cha_pmm_memmode_nm_invitox.setconflict
       [UNC_CHA_PMM_MEMMODE_NM_INVITOX.SETCONFLICT. Unit: uncore_cha]
  unc_cha_pmm_memmode_nm_setconflicts.llc
       [Memory Mode related events; Counts the number of times CHA saw a Near Memory set conflict in SF/LLC. Unit: uncore_cha]
  unc_cha_pmm_memmode_nm_setconflicts.sf
       [Memory Mode related events; Counts the number of times CHA saw a Near memory set conflict in SF/LLC. Unit: uncore_cha]
  unc_cha_pmm_memmode_nm_setconflicts.tor
       [Memory Mode related events; Counts the number of times CHA saw a Near Memory set conflict in TOR. Unit: uncore_cha]
  unc_cha_pmm_memmode_nm_setconflicts2.iodc
       [UNC_CHA_PMM_MEMMODE_NM_SETCONFLICTS2.IODC. Unit: uncore_cha]
  unc_cha_pmm_memmode_nm_setconflicts2.memwr
       [UNC_CHA_PMM_MEMMODE_NM_SETCONFLICTS2.MEMWR. Unit: uncore_cha]
  unc_cha_pmm_memmode_nm_setconflicts2.memwrni
       [UNC_CHA_PMM_MEMMODE_NM_SETCONFLICTS2.MEMWRNI. Unit: uncore_cha]
  unc_cha_pmm_qos.ddr4_fast_insert
       [UNC_CHA_PMM_QOS.DDR4_FAST_INSERT. Unit: uncore_cha]
  unc_cha_pmm_qos.rej_irq
       [UNC_CHA_PMM_QOS.REJ_IRQ. Unit: uncore_cha]
  unc_cha_pmm_qos.slow_insert
       [UNC_CHA_PMM_QOS.SLOW_INSERT. Unit: uncore_cha]
  unc_cha_pmm_qos.slowtorq_skip
       [UNC_CHA_PMM_QOS.SLOWTORQ_SKIP. Unit: uncore_cha]
  unc_cha_pmm_qos.throttle
       [UNC_CHA_PMM_QOS.THROTTLE. Unit: uncore_cha]
  unc_cha_pmm_qos.throttle_irq
       [UNC_CHA_PMM_QOS.THROTTLE_IRQ. Unit: uncore_cha]
  unc_cha_pmm_qos.throttle_prq
       [UNC_CHA_PMM_QOS.THROTTLE_PRQ. Unit: uncore_cha]
  unc_cha_pmm_qos_occupancy.ddr_fast_fifo
       [UNC_CHA_PMM_QOS_OCCUPANCY.DDR_FAST_FIFO. Unit: uncore_cha]
  unc_cha_pmm_qos_occupancy.ddr_slow_fifo
       [Number of SLOW TOR Request inserted to ha_pmm_tor_req_fifo. Unit: